Certainly!

To express the rules **inline** rather than across separate shapes and rules, we can embed the rules directly within the shapes using the **`sh:rule`** property. This approach encapsulates both the shapes and the associated rules in a single place, making your definitions more concise and easier to manage.

---

### **Using Inline Rules with `sh:rule`**

In SHACL-AF, you can include rules directly within a shape using the `sh:rule` property. This way, the rules that generate the hierarchy or structure are defined together with the shapes they apply to.

---

### **Step-by-Step Guide**

#### **1. Define Your Shapes with Inline Rules**

Instead of defining rules separately and linking them to shapes via `sh:condition`, define the rules directly within the shapes using `sh:rule`.

##### **Example: Person Shape with Inline Rule**

Let's define the `ex:PersonShape`, and include the rule to create a `ex:hasProfile` relationship inline.

```turtle
@prefix ex: <http://example.org/ns#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

# Define a shape for Person with an inline rule
ex:PersonShape a sh:NodeShape ;
    sh:targetClass ex:Person ;
    sh:rule [
        a sh:TripleRule ;
        sh:subject sh:this ;
        sh:predicate ex:hasProfile ;
        sh:object [
            a sh:IRI ;
            sh:uri [
                sh:template "http://example.org/profile/{@id}"
            ]
        ]
    ] ;
    # You can add constraints or properties here if needed
    .
```

**Explanation:**

- **`sh:rule`**: Embeds the rule directly within the shape.
- **`sh:this`**: Refers to the current focus node (an instance of `ex:Person`).
- The rule creates a triple linking each person to a new profile.

##### **Adding Further Hierarchy Inline**

Similarly, we can define a `ex:ProfileShape` that includes a rule to create `ex:hasSettings` relationships.

```turtle
# Define a shape for Profile with an inline rule
ex:ProfileShape a sh:NodeShape ;
    sh:targetObjectsOf ex:hasProfile ;
    sh:rule [
        a sh:TripleRule ;
        sh:subject sh:this ;
        sh:predicate ex:hasSettings ;
        sh:object [
            a sh:IRI ;
            sh:uri [
                sh:template "http://example.org/settings/{@id}"
            ]
        ]
    ] ;
    .
```

#### **2. Link to Existing Terms Inline**

If you want to link nodes to existing resources, include that rule directly within the shape.

```turtle
# Extend the PersonShape with another inline rule
ex:PersonShape a sh:NodeShape ;
    sh:targetClass ex:Person ;
    
    # First inline rule (as before)
    sh:rule [
        a sh:TripleRule ;
        sh:subject sh:this ;
        sh:predicate ex:hasProfile ;
        sh:object [
            a sh:IRI ;
            sh:uri [
                sh:template "http://example.org/profile/{@id}"
            ]
        ]
    ] ;
    
    # Second inline rule to link to an existing organization
    sh:rule [
        a sh:TripleRule ;
        sh:subject sh:this ;
        sh:predicate ex:memberOf ;
        sh:object ex:KnownOrganization ;  # Existing term
    ] ;
    .
```

---

### **Full Example with Inline Rules**

Below is the complete example with all rules expressed inline within their respective shapes.

```turtle
@prefix ex: <http://example.org/ns#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

# Shape for Person with inline rules
ex:PersonShape a sh:NodeShape ;
    sh:targetClass ex:Person ;
    
    # Rule to create Profile for each Person
    sh:rule [
        a sh:TripleRule ;
        sh:subject sh:this ;
        sh:predicate ex:hasProfile ;
        sh:object [
            a sh:IRI ;
            sh:uri [
                sh:template "http://example.org/profile/{@id}"
            ]
        ]
    ] ;
    
    # Rule to link Person to an existing Organization
    sh:rule [
        a sh:TripleRule ;
        sh:subject sh:this ;
        sh:predicate ex:memberOf ;
        sh:object ex:KnownOrganization ;
    ] ;
    .

# Shape for Profile with an inline rule
ex:ProfileShape a sh:NodeShape ;
    sh:targetObjectsOf ex:hasProfile ;
    
    # Rule to create Settings for each Profile
    sh:rule [
        a sh:TripleRule ;
        sh:subject sh:this ;
        sh:predicate ex:hasSettings ;
        sh:object [
            a sh:IRI ;
            sh:uri [
                sh:template "http://example.org/settings/{@id}"
            ]
        ]
    ] ;
    .
```

**Explanation:**

- Each shape (`ex:PersonShape`, `ex:ProfileShape`) includes its own `sh:rule` statements.
- Rules are directly associated with the shapes they operate on, making the structure clearer.
- **`sh:targetClass`** and **`sh:targetObjectsOf`** define which nodes the shapes apply to.
- Multiple rules can be included within a single shape by adding multiple `sh:rule` entries.

---

### **How It Works**

1. **Identify Target Nodes**: Shapes use `sh:targetClass` or `sh:targetObjectsOf` to specify their focus nodes.
2. **Inline Rules Execution**: For each focus node, the inline `sh:rule` statements are executed.
3. **Generate Hierarchical Structures**: The rules generate new triples that build the desired hierarchy directly from the focus nodes.
4. **Link Existing Resources**: Rules within the shapes can also link nodes to existing resources.

---

### **Benefits of Using Inline Rules**

- **Consolidation**: Shapes and their associated rules are defined together, improving readability.
- **Simplification**: Easier to manage and maintain since all related information is in one place.
- **Clarity**: Enhances understanding of how data is processed and generated.
- **Modularity**: Each shape is self-contained, which promotes reuse and modular design.

---

### **Additional Tips**

- **Multiple Rules in a Shape**: If a shape needs to perform several actions, you can include multiple `sh:rule` properties.
- **Order of Execution**: While SHACL doesn't guarantee the order of rule execution, designing rules to be independent of order is a good practice.
- **Referencing Existing Nodes**: Use direct IRIs in `sh:object` when linking to existing resources.
- **URI Templates with More Variables**: Enrich your IRIs by using additional properties from the node in `sh:template`.

---

### **Example Data and Expected Output**

#### **Input Data**

```turtle
@prefix ex: <http://example.org/ns#> .

# Existing Person instances
ex:person1 a ex:Person ;
    ex:name "Alice" .

ex:person2 a ex:Person ;
    ex:name "Bob" .
```

#### **After Applying Inline Rules**

The rules in the shapes will generate new triples:

```turtle
# For ex:person1
ex:person1 ex:hasProfile <http://example.org/profile/person1> .
ex:person1 ex:memberOf ex:KnownOrganization .

<http://example.org/profile/person1> ex:hasSettings <http://example.org/settings/person1> .

# For ex:person2
ex:person2 ex:hasProfile <http://example.org/profile/person2> .
ex:person2 ex:memberOf ex:KnownOrganization .

<http://example.org/profile/person2> ex:hasSettings <http://example.org/settings/person2> .
```

**Notes:**

- The `{@id}` in the `sh:template` corresponds to the identifier of the focus node. For `ex:person1`, it becomes `person1`.
- The generated IRIs are consistent with the templates defined in the rules.

---

### **Testing Your Shapes and Rules**

To ensure your inline rules work as expected:

1. **Use a SHACL Processor**: Utilize a SHACL engine that supports SHACL-AF and inline rules, such as TopBraid SHACL API.
2. **Validate Data**: Run your data against the shapes to see the generated triples.
3. **Inspect Results**: Verify that the hierarchy and links are correctly established.

---

### **Extending the Inline Rules**

You can further enrich your data and hierarchy by adding more inline rules within shapes.

#### **Example: Adding Preferences to Settings**

Suppose we want to add `ex:hasPreferences` from each `ex:Settings` node to a new `ex:Preferences` node.

```turtle
# Shape for Settings with an inline rule
ex:SettingsShape a sh:NodeShape ;
    sh:targetObjectsOf ex:hasSettings ;
    
    # Rule to create Preferences for each Settings node
    sh:rule [
        a sh:TripleRule ;
        sh:subject sh:this ;
        sh:predicate ex:hasPreferences ;
        sh:object [
            a sh:IRI ;
            sh:uri [
                sh:template "http://example.org/preferences/{@id}"
            ]
        ]
    ] ;
    .
```

**Explanation:**

- **`sh:targetObjectsOf ex:hasSettings`**: The shape applies to all nodes that are objects of `ex:hasSettings`.
- The rule adds another layer to the hierarchy, linking settings to preferences.

---

### **Comparison with the Previous Approach**

#### **Inline Rules**

- Pros:
  - All related definitions are in one place.
  - Easier to read and understand the context of rules.
  - Simplifies management of shapes and rules.

- Cons:
  - If the same rule applies to multiple shapes, you'd need to duplicate the rule in each shape.

#### **Separate Rules and Shapes**

- Pros:
  - Can reuse rules across multiple shapes without duplication.
  - Separation of concerns can make complex rule sets easier to organize.

- Cons:
  - Requires cross-referencing between shapes and rules.
  - Can be harder to follow the logic flow, especially for newcomers.

Choose the approach that best fits your project's complexity and maintainability requirements.

---

### **Conclusion**

By expressing rules inline within shapes using `sh:rule`, you can create a more streamlined and user-friendly way to define hierarchical structures in SHACL-AF without using SPARQL. This method keeps your rules close to the shapes they operate on, enhancing clarity and maintainability.

---
